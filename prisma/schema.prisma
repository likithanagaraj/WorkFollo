generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  hashedPassword String
  name           String?
  createdAt      DateTime      @default(now())
  client         Client[]
  projects       Project[]
  transactions   Transaction[]
  contracts      Contract[]
  invoices       Invoice[]
}

model Client {
  id           Int           @id @default(autoincrement())
  companyName  String
  contactName  String
  contactEmail String?
  contactPhone String?
  address      String?
  description  String?
  createdAt    DateTime      @default(now())
  userId       Int
  status       String?
  User         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects     Project[]
  Transaction  Transaction[]
  contracts    Contract[]
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  startDate   DateTime
  endDate     DateTime?
  contract    String?
  description String?
  createdAt   DateTime      @default(now())
  clientId    Int
  status      String?
  totalBudget Float?
  userId      Int?
  billings    Billing[]
  Client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User        User?         @relation(fields: [userId], references: [id],onDelete: Cascade)
  services    Service[]
  Transaction Transaction[]
}

model Billing {
  id         Int       @id @default(autoincrement())
  title      String
  amount     Float
  percentage Float?
  date       DateTime?
  projectId  Int
  Project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  amount      Float
  unit        String
  description String?
  createdAt   DateTime @default(now())
  projectId   Int
  Project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// db query -> all transactions of a user, 

model Transaction {
  id          Int      @id @default(autoincrement())
  title       String
  amount      Float
  date        DateTime
  type        String
  category    String
  description String?
  createdAt   DateTime @default(now())
  userId      Int
  projectId   Int?
  clientId    Int?
  Client      Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contract{
  date        DateTime?
  id          Int      @id @default(autoincrement())
  contractName String
  clientId    Int
  content     String?
  // signature   String?
  // imageSignature String?
  Client      Client   @relation(fields: [clientId], references: [id],onDelete: Cascade)
  userId      Int
  User       User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model Invoice {
  id                 Int    @id @default(autoincrement())
  invoiceNumber      Int @unique
  date               DateTime
  fromName           String
  fromCompanyName    String
  fromCompanyAddress String
  bankDetails        String
  logo               String?
  toName             String
  toAddress          String
  toCompanyName      String
  services           InvoiceService[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime?  @updatedAt
  User               User      @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId             Int
}

model InvoiceService {
  id          Int  @id @default(autoincrement())
  serviceName String
  unitPrice   Float
  quantity    Int
  discount    Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id],onDelete: Cascade)
  invoiceId   Int
}